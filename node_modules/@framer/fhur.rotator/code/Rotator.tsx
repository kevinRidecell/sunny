import * as React from "react";
import { addPropertyControls, Frame, ControlType } from "framer";

type Props = {
  width?: number;
  height?: number;
  target: any;
  duration: number;
  ease:
    | "linear"
    | "easeIn"
    | "easeOut"
    | "easeInOut"
    | "circIn"
    | "circOut"
    | "circInOut"
    | "backIn"
    | "backOut"
    | "backInOut"
    | "anticipate";
};

const ComponentInstructions: React.SFC = ({ children }) => {
  return (
    <div
      style={{
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexDirection: "column",
        width: "100%",
        height: "100%",
        fontSize: 16,
        fontWeight: 500,
        textAlign: "left",
        color: "#bb88ff",
        backgroundColor: "#2f2546",
        border: "1px solid #8855ff",
        padding: 32,
        overflow: "hidden"
      }}
    >
      {children}
    </div>
  );
};

export const Rotator: React.SFC<Props> = props => {
  const { target, duration, ease, ...rest } = props;

  console.log(target);
  if (target.length === 0) {
    return (
      <ComponentInstructions>
        <h2>Instructions</h2>
        <ol style={{ lineHeight: 2 }}>
          <li>
            <b>Target</b>: Connect this component to any Frame or Graphic that
            you wish to rotate.
          </li>
          <li>
            <b>Duration</b>: How long do you want the animation to last (in
            seconds)
          </li>
          <li>
            <b>Effect</b>: What kind of easing effects do you want to use (See
            our API docs over at https://www.framer.com/api/animation for more
            information)
          </li>
          <li>
            <b>Et voila!</b> Use it in your projects :)
          </li>
        </ol>
      </ComponentInstructions>
    );
  }

  return (
    <Frame
      background="transparent"
      rotate={0}
      animate={{ rotate: 360 }}
      transition={{
        loop: Infinity,
        duration,
        ease
      }}
      center={true}
      size="100%"
      {...rest}
    >
      {props.target}
    </Frame>
  );
};

Rotator.defaultProps = {
  width: 420,
  height: 450
};

addPropertyControls(Rotator, {
  target: {
    title: "Target",
    type: ControlType.ComponentInstance
  },
  duration: {
    title: "Duration",
    type: ControlType.Number,
    defaultValue: 1,
    step: 0.1,
    displayStepper: true
  },
  ease: {
    title: "Ease",
    type: ControlType.Enum,
    defaultValue: "linear",
    options: [
      "linear",
      "easeIn",
      "easeOut",
      "easeInOut",
      "circIn",
      "circOut",
      "circInOut",
      "backIn",
      "backOut",
      "backInOut",
      "anticipate"
    ]
  }
});
