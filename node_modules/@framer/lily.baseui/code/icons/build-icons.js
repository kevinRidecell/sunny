#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const icons = require('@uber/icons/manifest.json');

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function pascalCase(str) {
  return str
    .split('-')
    .map(capitalize)
    .join('');
}

function titleCase(str) {
  return str
    .split('-')
    .map(capitalize)
    .join(' ');
}

const iconList = Object.values(icons).map(i => i.exportedAs);
function cleanOldIcons() {
  const allJsFiles = fs.readdirSync(path.resolve(__dirname)).filter(f => f.endsWith('.js'));
  allJsFiles.forEach(f => {
    if (fs.readFileSync(path.resolve(__dirname, f), 'utf8').match(/^\/\/ FRAMER-AUTOGENERATED-ICON/m)) {
      fs.unlinkSync(path.resolve(__dirname, f));
    }
  });
}

async function generateNewIcons() {
  const iconTemplate = fs.readFileSync(path.resolve(__dirname, './icon-template.txt'), 'utf8');
  const iconExports = [];

  iconList.forEach(async componentName => {
    iconExports.push(componentName);

    let result = iconTemplate.replace(new RegExp('%%ICON_NAME%%', 'g'), componentName);

    fs.writeFileSync(path.resolve(__dirname, `./${componentName}.tsx`), result);
  });

  fs.writeFileSync(path.resolve(__dirname, `./utils.tsx`), `export {${iconExports.join(', ')}} from "@uber/icons"\n`);

  console.log(`Wrote ${iconList.length} icon(s)`);
}

cleanOldIcons();
generateNewIcons();
