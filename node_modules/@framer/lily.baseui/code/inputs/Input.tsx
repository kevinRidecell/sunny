import {FormControl, FormControlProps} from 'baseui/form-control';
import {Input as BaseInput} from 'baseui/input';
import {addPropertyControls, ControlType} from 'framer';
import * as React from 'react';
import {
  useFormControlValidation,
  FormControlPropertyControls,
  FormValidationPropertyControls,
  CommonInputPropertyControls,
} from '../utils/PropertyControls';
import {useManagedState} from '../utils/useManagedState';
import {withHOC} from '../withHOC';
import * as icons from '../icons/utils';

const makeIconEnhancer = (Icon, iconSize) => () => <Icon size={iconSize} />;
const enhancerFromProps = ({type, text, icon, iconSize}) => {
  switch (type) {
    case 'text': {
      return text;
    }
    case 'icon': {
      return icons[icon] ? makeIconEnhancer(icons[icon], iconSize) : null;
    }
    case 'none':
    default:
      return null;
  }
};

const InnerFormControlInput = ({
  size,
  value: initialValue,
  placeholder,
  onChange: originalOnChange,
  onBlur: originalOnBlur,
  disabled,
  showLabel,
  label,
  showCaption,
  caption,
  inputState,
  startEnhancerType,
  startEnhancerText,
  startEnhancerIcon,
  startEnhancerIconSize,
  endEnhancerType,
  endEnhancerText,
  endEnhancerIcon,
  endEnhancerIconSize,
  ...props
}: any) => {
  const [value, setValue] = useManagedState<string>(initialValue);
  const [validationResult, startValidation] = useFormControlValidation();

  const isValidationEnabled = props.formValidationType !== 'none';

  const formControlProps: Partial<FormControlProps> = {
    disabled,
    label: showLabel ? label : null,
  };

  if (showCaption && isValidationEnabled) {
    formControlProps.caption = caption;
    formControlProps.error = validationResult.error;
    formControlProps.positive = validationResult.positive;
  } else if (showCaption) {
    formControlProps.caption = caption;
    formControlProps.error = inputState === 'error' ? props.errorMessage : null;
    formControlProps.positive = inputState === 'positive' ? props.positiveMessage : null;
  }

  const onChange = React.useCallback(
    e => {
      setValue(e.target['value']);
      if (typeof originalOnChange === 'function') {
        originalOnChange(e);
      }
    },
    [originalOnChange, props, value],
  );

  const validateOnBlur = React.useCallback(
    e => {
      startValidation(props, value);
      if (typeof originalOnBlur === 'function') {
        originalOnBlur(e);
      }
    },
    [originalOnBlur, props, value],
  );

  const startEnhancer = enhancerFromProps({
    type: startEnhancerType,
    text: startEnhancerText,
    icon: startEnhancerIcon,
    iconSize: startEnhancerIconSize,
  });

  const endEnhancer = enhancerFromProps({
    type: endEnhancerType,
    text: endEnhancerText,
    icon: endEnhancerIcon,
    iconSize: endEnhancerIconSize,
  });

  return (
    <FormControl {...formControlProps}>
      <BaseInput
        size={size}
        value={value}
        placeholder={placeholder}
        onChange={onChange}
        onBlur={isValidationEnabled ? validateOnBlur : null}
        positive={isValidationEnabled ? !!validationResult.positive : inputState === 'positive'}
        error={isValidationEnabled ? !!validationResult.error : inputState === 'error'}
        startEnhancer={startEnhancer}
        endEnhancer={endEnhancer}
      />
    </FormControl>
  );
};

export const Input = withHOC(InnerFormControlInput);

Input.defaultProps = {
  width: 400,
  height: 120,
};

addPropertyControls(Input, {
  ...CommonInputPropertyControls,
  ...FormControlPropertyControls,
  ...FormValidationPropertyControls,
  startEnhancerType: {
    title: 'Start Enhancer',
    type: ControlType.SegmentedEnum,
    options: ['none', 'text', 'icon'],
    optionTitles: ['None', 'Text', 'Icon'],
    defaultValue: 'none',
  },
  startEnhancerText: {
    title: 'Text',
    type: ControlType.String,
    hidden: props => props.startEnhancerType !== 'text',
  },
  startEnhancerIcon: {
    title: 'Icon',
    type: ControlType.Enum,
    options: ['none', ...Object.keys(icons)],
    defaultValue: 'none',
    hidden: props => props.startEnhancerType !== 'icon',
  },
  startEnhancerIconSize: {
    type: ControlType.Number,
    title: 'Icon Size',
    defaultValue: 16,
    hidden: props => props.startEnhancerType !== 'icon',
  },
  endEnhancerType: {
    title: 'End Enhancer',
    type: ControlType.SegmentedEnum,
    options: ['none', 'text', 'icon'],
    optionTitles: ['None', 'Text', 'Icon'],
    defaultValue: 'none',
  },
  endEnhancerText: {
    title: 'Text',
    type: ControlType.String,
    hidden: props => props.endEnhancerType !== 'text',
  },
  endEnhancerIcon: {
    title: 'Icon',
    type: ControlType.Enum,
    options: ['none', ...Object.keys(icons)],
    defaultValue: 'none',
    hidden: props => props.endEnhancerType !== 'icon',
  },
  endEnhancerIconSize: {
    type: ControlType.Number,
    title: 'Icon Size',
    defaultValue: 16,
    hidden: props => props.endEnhancerType !== 'icon',
  },
});
