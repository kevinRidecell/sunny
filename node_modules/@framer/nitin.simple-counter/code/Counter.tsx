import * as React from "react";
import { FaPlus, FaMinus } from "react-icons/fa";
import { Frame, animate, PropertyControls, ControlType, FramerAnimation, PropertyStore, RenderTarget } from "framer"

interface Props {
  surfaceColor: string,
  strokeColor: string,
  buttonColor: string,
  countColor: string
}

interface State {
  surfaceColor: string,
  strokeColor: string,
  buttonColor: string,
  countColor: string
}

const containerStyle: React.CSSProperties = {
  display: "flex",
  height: "100%",
  textAlign: "center",
  border: "1px solid"
  overflow: "hidden",
  borderRadius: "4px"
};

const countStyle: React.CSSProperties = {
  width: "33.33%",
  overflow: "hidden",
  display: "flex",
  alignItems: "center",
  borderRight: "1px solid",
  borderLeft: "1px solid",
  background: "#fff"
};

const buttonStyle: React.CSSProperties = {
  width: "33.33%",
  paddingTop: "3px",
  display: "flex",
  alignItems: "center"
};

const contentStyle: React.CSSProperties = {
  width: "100%",
};


export class Counter extends React.Component<Partial<Props>, State> {
  static defaultProps = {
    surfaceColor: "#fff",
    strokeColor: "#000",
    buttonColor: "#000",
    countColor: "#000"
  }

  constructor(props) {
    super(props);
    this.state = {
      count: 0,
      opacity: .2,
      surfaceColor: "#fff",
      strokeColor: "#000",
      buttonColor: "#000",
      countColor: "#000"
    };
  }

  static propertyControls: PropertyControls<Props> = {
    surfaceColor: { type: ControlType.Color, title: "Background" },
    strokeColor: { type: ControlType.Color, title: "Border" },
    buttonColor: { type: ControlType.Color, title: "Buttons" },
    countColor: { type: ControlType.Color, title: "Counter" }
  }

  componentDidMount() {
    const { surfaceColor, strokeColor, buttonColor, countColor } = this.props
    this.checkCount()
    this.setState({ surfaceColor, strokeColor, buttonColor, countColor })
  }

  componentWillReceiveProps(props: Props) {
    let { surfaceColor, strokeColor, buttonColor, countColor } = this.props
   
    if (props.surfaceColor !== surfaceColor) {
      surfaceColor = props.surfaceColor
    }

    if (props.strokeColor !== strokeColor) {
      strokeColor = props.strokeColor
    }

    if (props.buttonColor !== buttonColor) {
      buttonColor = props.buttonColor
    }

    if (props.countColor !== countColor) {
      countColor = props.countColor
    }

    this.setState({ surfaceColor, strokeColor, buttonColor, countColor })
  }

  checkCount = () {
    this.state.count === 0 ? 
    this.setState({
      opacity: .2
    }) : 
    this.setState({
      opacity: 1
    });
  }

  handleIncrement = () => {
    this.setState({ count: this.state.count + 1 }, function() {
      this.checkCount();
    });
  };

  handleDecrement = () => {
    this.state.count === 0 ? 
    console.log("okay") : 
    this.setState({ count: this.state.count - 1 }, function() {
      this.checkCount();
    });
  };

  render() {

    const { surfaceColor, strokeColor, buttonColor, countColor } = this.state

    return (
      <div style={Object.assign( {}, containerStyle, {borderColor: strokeColor}, {color: buttonColor})}>
        <div style={Object.assign( {}, buttonStyle, {background: surfaceColor} )} onClick={this.handleDecrement}>
          <div style={Object.assign( {}, contentStyle, {opacity: this.state.opacity} )}>
            <FaMinus />
          </div>
        </div>
        <div style={Object.assign( {}, countStyle, {borderColor: strokeColor}, {color: countColor})}>
          <div style={contentStyle}>{this.state.count}</div>
        </div>
        <div style={Object.assign( {}, buttonStyle, {backgroundColor: surfaceColor})} onClick={this.handleIncrement}>
          <div style={contentStyle}>
            <FaPlus />
          </div>
        </div>
      </div>
    );
  }
}