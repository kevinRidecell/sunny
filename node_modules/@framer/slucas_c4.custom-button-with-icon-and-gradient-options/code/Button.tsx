import * as React from "react"
//@ts-ignore
import { Frame, Stack, addPropertyControls, ControlType } from "framer"

// Open Preview: Command + P
// Learn more: https://framer.com/api

export function Button(props) {
    const {
        text,
        gap,
        backgroundcolourdefault,
        showborder,
        borderwidth,
        borderstyle,
        bordercolourdefault,
        textcolourdefault,
        textalign,
        fontsize,
        fontfamily,
        fontstyle,
        texttransform,
        letterspacing,
        shadow,
        width,
        height,
        ontap,
        showiconoptions,
        showiconleft,
        showiconright,
        iconleft,
        iconwidth,
        iconheight,
        variant,
        buttonstates,
        // default
        hoffsetdefault,
        voffsetdefault,
        blurdefault,
        spreaddefault,
        shadowcolourdefault,
        // Pressed / WhileTap
        gradientstartpressed,
        gradientendpressed,
        gradientanglepressed,
        hoffsetpressed,
        voffsetpressed,
        blurpressed,
        spreadpressed,
        shadowcolourpressed,
        textcolourpressed,
        whileTapScale,
        backgroundcolourpressed,
        bordercolourpressed,
        whiletaphoffset,
        whiletapvoffset,
        whiletapblur,
        whiletapspread,
        whiletapshadowcolour,
        // Hover / WhileHover
        gradientstarthover,
        gradientendhover,
        gradientanglehover,
        hoffsethover,
        voffsethover,
        blurhover,
        spreadhover,
        shadowcolourhover,
        textcolourhover,
        whileHoverScale,
        backgroundcolourhover,
        bordercolourhover,
        whilehoverhoffset,
        whilehovervoffset,
        whilehoverblur,
        whilehoverspread,
        whilehovershadowcolour,
        // Gradient
        showgradient,
        gradientstartdefault,
        gradientenddefault,
        gradientangledefault,
        whiletapshadow,
        // Disabled
        gradientstartdisabled,
        gradientenddisabled,
        gradientangledisabled,
        backgroundcolourdisabled,
        bordercolourdisabled,
        disabled,
        ...rest
    } = props

    const variants = {
        default: {
            width: props.width,
            height: props.height,
            opacity: 1,
            scale: 1,
            backgroundColor: props.backgroundcolourdefault,
            background: showgradient
                ? `linear-gradient(${gradientangledefault}deg, ${gradientstartdefault}, ${gradientenddefault})`
                : props.backgroundcolourdefault,
            color: props.textcolourdefault,
            border: showborder
                ? `${borderwidth}px ${borderstyle} ${bordercolourdefault}`
                : `0px solid rgba(0,0,0,0)`,
            // textAlign: props.textalign,
            fontSize: props.fontsize,
            fontFamily: props.fontfamily,
            fontWeight: props.fontstyle,
            textTransform: props.texttransform,
            letterSpacing: props.letterspacing,
            borderRadius: props.borderradius,
            padding: props.padding,
            boxShadow: shadow
                ? `${hoffsetdefault}px ${voffsetdefault}px ${blurdefault}px ${spreaddefault}px ${shadowcolourdefault}`
                : `0px 0px 0px rgba(0,0,0,0)`,
        },
        hover: {
            width: props.width,
            height: props.height,
            opacity: 1,
            scale: whileHoverScale,
            backgroundColor: props.backgroundcolourhover,
            background: showgradient
                ? `linear-gradient(${gradientanglehover}deg, ${gradientstarthover}, ${gradientendhover})`
                : props.backgroundcolourhover,
            color: props.textcolourhover,
            border: showborder
                ? `${borderwidth}px ${borderstyle} ${bordercolourhover}`
                : `0px solid rgba(0,0,0,0)`,
            // textAlign: props.textalign,
            fontSize: props.fontsize,
            fontFamily: props.fontfamily,
            fontWeight: props.fontstyle,
            textTransform: props.texttransform,
            letterSpacing: props.letterspacing,
            borderRadius: props.borderradius,
            padding: props.padding,
            boxShadow: `${hoffsethover}px ${voffsethover}px ${blurhover}px ${spreadhover}px ${shadowcolourhover}`,
        },
        pressed: {
            width: props.width,
            height: props.height,
            opacity: 1,
            scale: whileTapScale,
            backgroundColor: props.backgroundcolourhover,
            background: showgradient
                ? `linear-gradient(${gradientanglepressed}deg, ${gradientstartpressed}, ${gradientendpressed})`
                : props.backgroundcolourpressed,
            color: props.textcolourpressed,
            border: showborder
                ? `${borderwidth}px ${borderstyle} ${bordercolourpressed}`
                : `0px solid rgba(0,0,0,0)`,
            // textAlign: props.textalign,
            fontSize: props.fontsize,
            fontFamily: props.fontfamily,
            fontWeight: props.fontstyle,
            textTransform: props.texttransform,
            letterSpacing: props.letterspacing,
            borderRadius: props.borderradius,
            padding: props.padding,
            boxShadow: `${hoffsetpressed}px ${voffsetpressed}px ${blurpressed}px ${spreadpressed}px ${shadowcolourpressed}`,
        },
        disabled: {
            width: props.width,
            height: props.height,
            opacity: 1,
            scale: 1,
            backgroundColor: props.backgroundcolourdisabled,
            background: showgradient
                ? `linear-gradient(${gradientangledisabled}deg, ${gradientstartdisabled}, ${gradientenddisabled})`
                : props.backgroundcolourdisabled,
            color: props.textcolourdisabled,
            border: showborder
                ? `${borderwidth}px ${borderstyle} ${bordercolourdisabled}`
                : `0px solid rgba(0,0,0,0)`,
            // textAlign: props.textalign,
            fontSize: props.fontsize,
            fontFamily: props.fontfamily,
            fontWeight: props.fontstyle,
            textTransform: props.texttransform,
            letterSpacing: props.letterspacing,
            borderRadius: props.borderradius,
            padding: props.padding,
            boxShadow: `0px 0px 0px rgba(0,0,0,0)`,
        },
    }

    // const buttonstyle: React.CSSProperties = {
    //     width: props.width,
    //     height: props.height,
    //     opacity: 1,
    //     scale: 1,
    //     backgroundColor: props.backgroundcolour,
    //     background: showgradient
    //         ? `linear-gradient(${gradientangle}deg, ${gradientstart}, ${gradientend})`
    //         : props.backgroundcolour,
    //     color: props.textcolour,
    //     border: showborder
    //         ? `${borderwidth}px ${borderstyle} ${bordercolourdefault}`
    //         : `0px solid rgba(0,0,0,0)`,
    //     // textAlign: props.textalign,
    //     fontSize: props.fontsize,
    //     fontFamily: props.fontfamily,
    //     fontWeight: props.fontstyle,
    //     textTransform: props.texttransform,
    //     letterSpacing: props.letterspacing,
    //     borderRadius: props.borderradius,
    //     padding: props.padding,
    //     boxShadow: shadow
    //         ? `${hoffset}px ${voffset}px ${blur}px ${spread}px ${shadowcolour}`
    //         : `0px 0px 0px rgba(0,0,0,0)`,
    // }

    return (
        <Stack
            direction="horizontal"
            alignment="center"
            distribution="center"
            width={"100%"}
            height={"100%"}
            initial={disabled ? variants.disabled : buttonstates}
            animate={"default"}
            variants={variants}
            // background={backgroundcolour}
            whileTap={variants.pressed}
            whileHover={variants.hover}
            onTap={ontap}
            borderRadius={props.height / 2}
            gap={gap}
        >
            {showiconoptions && showiconleft && (
                <Frame
                    width={props.iconwidth}
                    height={props.iconheight}
                    background={{ src: props.iconleft }}
                ></Frame>
            )}
            <Frame width="auto" height="100%" background="none">
                {text}
            </Frame>

            {showiconoptions && showiconright && (
                <Frame
                    width={props.iconwidth}
                    height={props.iconheight}
                    background={{ src: props.iconright }}
                ></Frame>
            )}
        </Stack>
    )
}

Button.defaultProps = {
    height: 44,
    width: 160,
    text: "Button",
    colour: "#ffffff",
    whileTapScale: 0.95,
    whileHoverScale: 1.1,
    scaleTransition: {
        type: "spring",
        duration: 0.3,
        delay: 0,
        stiffness: 600,
        damping: 30,
        mass: 1,
    },
}

// Learn more: https://framer.com/api/property-controls/
addPropertyControls(Button, {
    showtext: {
        type: ControlType.Boolean,
        title: "Typography",
        defaultValue: false,
        enabledTitle: "Show",
        disabledTitle: "Hide",
    },
    text: {
        title: "Text",
        placeholder: "Button text",
        type: ControlType.String,
        defaultValue: "Button",
        hidden(props) {
            return props.showtext === false
        },
    },
    fontfamily: {
        title: "Font",
        defaultValue: "Helvetica",
        placeholder: "e.g. Helvetica",
        type: ControlType.String,
        hidden(props) {
            return props.showtext === false
        },
    },
    fontsize: {
        title: "Size",
        type: ControlType.Number,
        defaultValue: 18,
        min: 0,
        max: 360,
        step: 1,
        unit: "px",
        displayStepper: true,
        hidden(props) {
            return props.showtext === false
        },
    },
    fontstyle: {
        title: "Weight",
        type: ControlType.Enum,
        defaultValue: "400",
        options: [
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700",
            "800",
            "900",
        ],
        optionTitles: [
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700",
            "800",
            "900",
        ],
        hidden(props) {
            return props.showtext === false
        },
    },
    texttransform: {
        title: "Transform",
        type: ControlType.Enum,
        defaultValue: "None",
        options: ["none", "lowercase", "uppercase"],
        optionTitles: ["None", "Lowercase", "Uppercase"],
        hidden(props) {
            return props.showtext === false
        },
    },
    letterspacing: {
        type: ControlType.Number,
        min: 0,
        max: 50,
        step: 0.1,
        title: "Spacing",
        hidden(props) {
            return props.showtext === false
        },
    },
    showstyles: {
        type: ControlType.Boolean,
        title: "Style",
        defaultValue: false,
        enabledTitle: "Show",
        disabledTitle: "Hide",
    },
    buttonstates: {
        title: "States",
        type: ControlType.Enum,
        defaultValue: "default",
        options: ["default", "hover", "pressed", "disabled"],
        optionTitles: ["Default", "Hover", "Pressed", "Disabled"],
        hidden(props) {
            return props.showstyles === false
        },
    },
    showiconoptions: {
        type: ControlType.Boolean,
        title: "Icon?",
        defaultValue: false,
        enabledTitle: "Yes",
        disabledTitle: "No",
        hidden(props) {
            return props.showstyles === false
        },
    },
    showiconleft: {
        type: ControlType.Boolean,
        title: "Icon left?",
        defaultValue: false,
        enabledTitle: "Yes",
        disabledTitle: "No",
        hidden(props) {
            return props.showiconoptions === false || props.showstyles === false
        },
    },
    iconleft: {
        type: ControlType.File,
        allowedFileTypes: ["svg", "jpg", "png"],
        title: "Icon",
        hidden(props) {
            return (
                props.showiconleft === false ||
                props.showiconoptions === false ||
                props.showstyles === false
            )
        },
    },
    showiconright: {
        type: ControlType.Boolean,
        title: "Icon right?",
        defaultValue: false,
        enabledTitle: "Yes",
        disabledTitle: "No",
        hidden(props) {
            return props.showiconoptions === false || props.showstyles === false
        },
    },
    iconright: {
        type: ControlType.File,
        allowedFileTypes: ["svg", "jpg", "png"],
        title: "Icon",
        hidden(props) {
            return (
                props.showiconright === false ||
                props.showiconoptions === false ||
                props.showstyles === false
            )
        },
    },
    iconwidth: {
        title: "Width",
        type: ControlType.Number,
        defaultValue: 24,
        min: 0,
        max: 360,
        step: 1,
        unit: "px",
        displayStepper: true,
        hidden(props) {
            return props.showiconoptions === false || props.showstyles === false
        },
    },
    iconheight: {
        title: "Height",
        type: ControlType.Number,
        defaultValue: 24,
        min: 0,
        max: 360,
        step: 1,
        unit: "px",
        displayStepper: true,
        hidden(props) {
            return props.showiconoptions === false || props.showstyles === false
        },
    },
    gap: {
        title: "Gap",
        type: ControlType.Number,
        defaultValue: 0,
        min: 0,
        max: 360,
        step: 1,
        unit: "px",
        displayStepper: true,
        hidden(props) {
            return props.showiconoptions === false || props.showstyles === false
        },
    },
    showgradient: {
        type: ControlType.Boolean,
        title: "Gradient?",
        enabledTitle: "Yes",
        disabledTitle: "No",
        defaultValue: false,
        hidden(props) {
            return props.showstyles === false
        },
    },
    gradientstartdefault: {
        title: "Start",
        type: ControlType.Color,
        defaultValue: "#0099ff",
        hidden(props) {
            return props.showgradient === false || props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
        },
    },
    gradientenddefault: {
        title: "End",
        type: ControlType.Color,
        defaultValue: "#390F71",
        hidden(props) {
            return props.showgradient === false || props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
        },
    },
    gradientangledefault: {
        title: "Angle",
        type: ControlType.Number,
        defaultValue: 45,
        min: 0,
        max: 360,
        step: 1,
        unit: "deg",
        hidden(props) {
            return props.showgradient === false || props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
        },
    },
    gradientstarthover: {
        title: "Start",
        type: ControlType.Color,
        defaultValue: "#0099ff",
        hidden(props) {
            return props.showgradient === false || props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "default" ||
                props.buttonstates === "disabled"
        },
    },
    gradientendhover: {
        title: "End",
        type: ControlType.Color,
        defaultValue: "#390F71",
        hidden(props) {
            return props.showgradient === false || props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "default" ||
                props.buttonstates === "disabled"
        },
    },
    gradientanglehover: {
        title: "Angle",
        type: ControlType.Number,
        defaultValue: 45,
        min: 0,
        max: 360,
        step: 1,
        unit: "deg",
        hidden(props) {
            return props.showgradient === false || props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "default" ||
                props.buttonstates === "disabled"
        },
    },
    gradientstartpressed: {
        title: "Start",
        type: ControlType.Color,
        defaultValue: "#0099ff",
        hidden(props) {
            return props.showgradient === false || props.showstyles === false ||
                props.buttonstates === "hover" ||
                props.buttonstates === "default" ||
                props.buttonstates === "disabled"
        },
    },
    gradientendpressed: {
        title: "End",
        type: ControlType.Color,
        defaultValue: "#390F71",
        hidden(props) {
            return props.showgradient === false || props.showstyles === false ||
                props.buttonstates === "hover" ||
                props.buttonstates === "default" ||
                props.buttonstates === "disabled"
        },
    },
    gradientanglepressed: {
        title: "Angle",
        type: ControlType.Number,
        defaultValue: 45,
        min: 0,
        max: 360,
        step: 1,
        unit: "deg",
        hidden(props) {
            return props.showgradient === false || props.showstyles === false ||
                props.buttonstates === "hover" ||
                props.buttonstates === "default" ||
                props.buttonstates === "disabled"
        },
    },
    gradientstartdisabled: {
        title: "Start",
        type: ControlType.Color,
        defaultValue: "rgb(128, 128, 128)",
        hidden(props) {
            return props.showgradient === false || props.showstyles === false ||
                props.buttonstates === "hover" ||
                props.buttonstates === "default" ||
                props.buttonstates === "pressed"
        },
    },
    gradientenddisabled: {
        title: "End",
        type: ControlType.Color,
        defaultValue: "rgb(128, 128, 128)",
        hidden(props) {
            return props.showgradient === false || props.showstyles === false ||
                props.buttonstates === "hover" ||
                props.buttonstates === "default" ||
                props.buttonstates === "pressed"
        },
    },
    gradientangledisabled: {
        title: "Angle",
        type: ControlType.Number,
        defaultValue: 45,
        min: 0,
        max: 360,
        step: 1,
        unit: "deg",
        hidden(props) {
            return props.showgradient === false || props.showstyles === false ||
                props.buttonstates === "hover" ||
                props.buttonstates === "default" ||
                props.buttonstates === "pressed"
        },
    },
    backgroundcolourdefault: {
        title: "Background",
        type: ControlType.Color,
        defaultValue: "rgb(1, 119, 255)",
        hidden(props) {
            return (
                props.showstyles === false ||
                props.showgradient === true ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    backgroundcolourhover: {
        title: "Background",
        type: ControlType.Color,
        defaultValue: "rgb(1, 119, 255)",
        hidden(props) {
            return (
                props.showstyles === false ||
                props.showgradient === true ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "default" ||
                props.buttonstates === "disabled"
            )
        },
    },
    backgroundcolourpressed: {
        title: "Background",
        type: ControlType.Color,
        defaultValue: "rgb(1, 119, 255)",
        hidden(props) {
            return (
                props.showstyles === false ||
                props.showgradient === true ||
                props.buttonstates === "default" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    backgroundcolourdisabled: {
        title: "Background",
        type: ControlType.Color,
        defaultValue: "rgb(128, 128, 128)",
        hidden(props) {
            return (
                props.showstyles === false ||
                props.showgradient === true ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "default"
            )
        },
    },
    textcolourdefault: {
        title: "Text",
        type: ControlType.Color,
        defaultValue: "#ffffff",
        hidden(props) {
            return (
                props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    textcolourhover: {
        title: "Text",
        type: ControlType.Color,
        defaultValue: "#ffffff",
        hidden(props) {
            return (
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "disabled"
            )
        },
    },
    textcolourpressed: {
        title: "Text",
        type: ControlType.Color,
        defaultValue: "#ffffff",
        hidden(props) {
            return (
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    textcolourdisabled: {
        title: "Text",
        type: ControlType.Color,
        defaultValue: "#dddddd",
        hidden(props) {
            return (
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "pressed"
            )
        },
    },
    showborder: {
        type: ControlType.Boolean,
        title: "Border?",
        enabledTitle: "Yes",
        disabledTitle: "No",
        defaultValue: false,
        hidden(props) {
            return props.showstyles === false
        },
    },
    borderstyle: {
        title: "Style",
        type: ControlType.Enum,
        defaultValue: "solid",
        options: [
            "dotted",
            "dashed",
            "solid",
            "double",
            "groove",
            "ridge",
            "inset",
            "outset",
            "none",
            "hidden",
        ],
        optionTitles: [
            "Dotted",
            "Dashed",
            "Solid",
            "Double",
            "Groove",
            "Ridge",
            "Inset",
            "Outset",
            "None",
            "Hidden",
        ],
        hidden(props) {
            return props.showborder === false || props.showstyles === false
        },
    },
    borderwidth: {
        title: "Width",
        type: ControlType.Number,
        defaultValue: 1,
        min: 0,
        max: 50,
        step: 1,
        unit: "px",
        hidden(props) {
            return props.showborder === false || props.showstyles === false
        },
    },
    bordercolourdefault: {
        title: "Color",
        type: ControlType.Color,
        defaultValue: "#0099ff",
        hidden(props) {
            return (
                props.showborder === false ||
                props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    bordercolourpressed: {
        title: "Color",
        type: ControlType.Color,
        defaultValue: "#0099ff",
        hidden(props) {
            return (
                props.showborder === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    bordercolourhover: {
        title: "Color",
        type: ControlType.Color,
        defaultValue: "#0099ff",
        hidden(props) {
            return (
                props.showborder === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "disabled"
            )
            // ||
            //     props.buttonstates === "pressed" ||
            //     props.buttonstates === "default"
        },
    },
    bordercolourdisabled: {
        title: "Color",
        type: ControlType.Color,
        defaultValue: "#0099ff",
        hidden(props) {
            return (
                props.showborder === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "pressed"
            )
            // ||
            //     props.buttonstates === "pressed" ||
            //     props.buttonstates === "default"
        },
    },
    shadow: {
        title: "Shadow",
        type: ControlType.Boolean,
        defaultValue: false,
        enabledTitle: "Show",
        disabledTitle: "Hide",
        hidden(props) {
            return (
                props.showstyles === false || props.buttonstates === "disabled"
            )
        },
    },
    hoffsetdefault: {
        title: "H offset",
        type: ControlType.Number,
        defaultValue: 0,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    hoffsetpressed: {
        title: "H offset",
        type: ControlType.Number,
        defaultValue: 0,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    hoffsethover: {
        title: "H offset",
        type: ControlType.Number,
        defaultValue: 0,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "disabled"
            )
        },
    },
    voffsetdefault: {
        title: "V offset",
        type: ControlType.Number,
        defaultValue: 1,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    voffsetpressed: {
        title: "V offset",
        type: ControlType.Number,
        defaultValue: 1,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    voffsethover: {
        title: "V offset",
        type: ControlType.Number,
        defaultValue: 1,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "disabled"
            )
        },
    },
    blurdefault: {
        title: "Blur",
        type: ControlType.Number,
        defaultValue: 4,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    blurpressed: {
        title: "Blur",
        type: ControlType.Number,
        defaultValue: 4,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    blurhover: {
        title: "Blur",
        type: ControlType.Number,
        defaultValue: 4,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "disabled"
            )
        },
    },
    spreaddefault: {
        title: "Spread",
        type: ControlType.Number,
        defaultValue: 0,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    spreadpressed: {
        title: "Spread",
        type: ControlType.Number,
        defaultValue: 0,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    spreadhover: {
        title: "Spread",
        type: ControlType.Number,
        defaultValue: 0,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "disabled"
            )
        },
    },
    shadowcolourdefault: {
        title: "Colour",
        type: ControlType.Color,
        defaultValue: "rgba(1, 119, 255, 0.25)",
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    shadowcolourpressed: {
        title: "Colour",
        type: ControlType.Color,
        defaultValue: "rgba(1, 119, 255, 0.25)",
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "hover" ||
                props.buttonstates === "disabled"
            )
        },
    },
    shadowcolourhover: {
        title: "Colour",
        type: ControlType.Color,
        defaultValue: "rgba(1, 119, 255, 0.25)",
        hidden(props) {
            return (
                props.shadow === false ||
                props.showstyles === false ||
                props.buttonstates === "default" ||
                props.buttonstates === "pressed" ||
                props.buttonstates === "disabled"
            )
        },
    },
    borderradius: {
        title: "Radius",
        type: ControlType.Number,
        defaultValue: 50,
        min: 0,
        max: 50,
        step: 1,
        hidden(props) {
            return props.showstyles === false
        },
    },
    showanimation: {
        title: "Animation",
        type: ControlType.Boolean,
        defaultValue: false,
        enabledTitle: "Show",
        disabledTitle: "Hide",
    },
    whileHoverScale: {
        title: "Hover Scale",
        type: ControlType.Number,
        min: 0.5,
        max: 1.5,
        step: 0.1,
        hidden(props) {
            return props.showanimation === false
        },
    },
    whileTapScale: {
        title: "Tap Scale",
        type: ControlType.Number,
        min: 0.5,
        max: 1.5,
        step: 0.1,
        hidden(props) {
            return props.showanimation === false
        },
    },
    scaleTransition: {
        title: "Scale Anim",
        type: ControlType.Transition,
        hidden(props) {
            return props.showanimation === false
        },
    },
    // I think this one is redundant for now.
    colorTransition: {
        title: "Color Anim",
        type: ControlType.Transition,
        hidden(props) {
            return props.showanimation === false
        },
    },
    disabled: {
        type: ControlType.Boolean,
        title: "Disabled?",
        defaultValue: false,
        enabledTitle: "True",
        disabledTitle: "False",
    },
    ontap: {
        type: ControlType.EventHandler,
    },
})
